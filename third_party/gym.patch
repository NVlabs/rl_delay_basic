diff --git a/gym/envs/classic_control/acrobot.py b/gym/envs/classic_control/acrobot.py
index 91321f3..afa2522 100644
--- a/gym/envs/classic_control/acrobot.py
+++ b/gym/envs/classic_control/acrobot.py
@@ -14,6 +14,7 @@ __author__ = "Christoph Dann <cdann@cdann.de>"
 # SOURCE:
 # https://github.com/rlpy/rlpy/blob/master/rlpy/Domains/Acrobot.py
 
+
 class AcrobotEnv(core.Env):
 
     """
@@ -83,7 +84,7 @@ class AcrobotEnv(core.Env):
     domain_fig = None
     actions_num = 3
 
-    def __init__(self):
+    def __init__(self, physical_noise_std_ratio=0):
         self.viewer = None
         high = np.array([1.0, 1.0, 1.0, 1.0, self.MAX_VEL_1, self.MAX_VEL_2], dtype=np.float32)
         low = -high
@@ -91,6 +92,8 @@ class AcrobotEnv(core.Env):
         self.action_space = spaces.Discrete(3)
         self.state = None
         self.seed()
+        #external edit: add normal noise to the parameters, with std proportional to the original values
+        self.physical_noise_std_ratio = physical_noise_std_ratio
 
     def seed(self, seed=None):
         self.np_random, seed = seeding.np_random(seed)
@@ -138,14 +141,22 @@ class AcrobotEnv(core.Env):
         s = self.state
         return bool(-cos(s[0]) - cos(s[1] + s[0]) > 1.)
 
+    def _perturb_param(self, param):
+        return param + np.random.normal(0, param * self.physical_noise_std_ratio)
+
     def _dsdt(self, s_augmented, t):
-        m1 = self.LINK_MASS_1
-        m2 = self.LINK_MASS_2
-        l1 = self.LINK_LENGTH_1
+        # m1 = self.LINK_MASS_1
+        m1 = self._perturb_param(self.LINK_MASS_1)
+        # m2 = self.LINK_MASS_2
+        m2 = self._perturb_param(self.LINK_MASS_2)
+        # l1 = self.LINK_LENGTH_1
+        l1 = self._perturb_param(self.LINK_LENGTH_1)
+
         lc1 = self.LINK_COM_POS_1
         lc2 = self.LINK_COM_POS_2
         I1 = self.LINK_MOI
         I2 = self.LINK_MOI
+
         g = 9.8
         a = s_augmented[-1]
         s = s_augmented[:-1]
diff --git a/gym/envs/classic_control/cartpole.py b/gym/envs/classic_control/cartpole.py
index 78d806b..d3c6ba2 100644
--- a/gym/envs/classic_control/cartpole.py
+++ b/gym/envs/classic_control/cartpole.py
@@ -25,17 +25,17 @@ class CartPoleEnv(gym.Env):
 
     Observation:
         Type: Box(4)
-        Num     Observation               Min                     Max
-        0       Cart Position             -4.8                    4.8
-        1       Cart Velocity             -Inf                    Inf
-        2       Pole Angle                -0.418 rad (-24 deg)    0.418 rad (24 deg)
-        3       Pole Angular Velocity     -Inf                    Inf
+        Num	Observation               Min             Max
+        0	Cart Position             -4.8            4.8
+        1	Cart Velocity             -Inf            Inf
+        2	Pole Angle                -24 deg         24 deg
+        3	Pole Velocity At Tip      -Inf            Inf
 
     Actions:
         Type: Discrete(2)
-        Num   Action
-        0     Push cart to the left
-        1     Push cart to the right
+        Num	Action
+        0	Push cart to the left
+        1	Push cart to the right
 
         Note: The amount the velocity that is reduced or increased is not
         fixed; it depends on the angle the pole is pointing. This is because
@@ -54,7 +54,7 @@ class CartPoleEnv(gym.Env):
         the display).
         Episode length is greater than 200.
         Solved Requirements:
-        Considered solved when the average return is greater than or equal to
+        Considered solved when the average reward is greater than or equal to
         195.0 over 100 consecutive trials.
     """
 
@@ -63,7 +63,7 @@ class CartPoleEnv(gym.Env):
         'video.frames_per_second': 50
     }
 
-    def __init__(self):
+    def __init__(self, physical_noise_std_ratio=0):
         self.gravity = 9.8
         self.masscart = 1.0
         self.masspole = 0.1
@@ -74,6 +74,9 @@ class CartPoleEnv(gym.Env):
         self.tau = 0.02  # seconds between state updates
         self.kinematics_integrator = 'euler'
 
+        # external edit: add normal noise to the parameters, with std proportional to the original values
+        self.physical_noise_std_ratio = physical_noise_std_ratio
+
         # Angle at which to fail the episode
         self.theta_threshold_radians = 12 * 2 * math.pi / 360
         self.x_threshold = 2.4
@@ -99,7 +102,15 @@ class CartPoleEnv(gym.Env):
         self.np_random, seed = seeding.np_random(seed)
         return [seed]
 
+    def _perturb_param(self, param):
+        return param + np.random.normal(0, param * self.physical_noise_std_ratio)
+
     def step(self, action):
+        masspole = self._perturb_param(self.masspole)
+        masscart = self._perturb_param(self.masscart)
+        total_mass = (masspole + masscart)
+        length = self._perturb_param(self.length)
+
         err_msg = "%r (%s) invalid" % (action, type(action))
         assert self.action_space.contains(action), err_msg
 
@@ -110,9 +121,10 @@ class CartPoleEnv(gym.Env):
 
         # For the interested reader:
         # https://coneural.org/florian/papers/05_cart_pole.pdf
-        temp = (force + self.polemass_length * theta_dot ** 2 * sintheta) / self.total_mass
-        thetaacc = (self.gravity * sintheta - costheta * temp) / (self.length * (4.0 / 3.0 - self.masspole * costheta ** 2 / self.total_mass))
-        xacc = temp - self.polemass_length * thetaacc * costheta / self.total_mass
+        temp = (force + self.polemass_length * theta_dot ** 2 * sintheta) / total_mass
+        thetaacc = (self.gravity * sintheta - costheta * temp) / (
+                    length * (4.0 / 3.0 - masspole * costheta ** 2 / total_mass))
+        xacc = temp - self.polemass_length * thetaacc * costheta / total_mass
 
         if self.kinematics_integrator == 'euler':
             x = x + self.tau * x_dot
@@ -163,7 +175,7 @@ class CartPoleEnv(gym.Env):
         screen_height = 400
 
         world_width = self.x_threshold * 2
-        scale = screen_width/world_width
+        scale = screen_width / world_width
         carty = 100  # TOP OF CART
         polewidth = 10.0
         polelen = scale * (2 * self.length)
@@ -186,7 +198,7 @@ class CartPoleEnv(gym.Env):
             pole.add_attr(self.poletrans)
             pole.add_attr(self.carttrans)
             self.viewer.add_geom(pole)
-            self.axle = rendering.make_circle(polewidth/2)
+            self.axle = rendering.make_circle(polewidth / 2)
             self.axle.add_attr(self.poletrans)
             self.axle.add_attr(self.carttrans)
             self.axle.set_color(.5, .5, .8)
